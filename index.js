// Generated by CommonJS Everywhere 0.9.7
(function (global) {
    function require(file, parentModule) {
        if ({}.hasOwnProperty.call(require.cache, file))
            return require.cache[file];
        var resolved = require.resolve(file);
        if (!resolved)
            throw new Error('Failed to resolve module ' + file);
        var module$ = {
            id: file,
            require: require,
            filename: file,
            exports: {},
            loaded: false,
            parent: parentModule,
            children: []
        };
        if (parentModule)
            parentModule.children.push(module$);
        var dirname = file.slice(0, file.lastIndexOf('/') + 1);
        require.cache[file] = module$.exports;
        resolved.call(module$.exports, module$, module$.exports, dirname, file);
        module$.loaded = true;
        return require.cache[file] = module$.exports;
    }
    require.modules = {};
    require.cache = {};
    require.resolve = function (file) {
        return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
    };
    require.define = function (file, fn) {
        require.modules[file] = fn;
    };
    var process = function () {
        var cwd = '/';
        return {
            title: 'browser',
            version: 'v0.10.33',
            browser: true,
            env: {},
            argv: [],
            nextTick: global.setImmediate || function (fn) {
                setTimeout(fn, 0);
            },
            cwd: function () {
                return cwd;
            },
            chdir: function (dir) {
                cwd = dir;
            }
        };
    }();
    require.define('docMSS/index.ls', function (module, exports, __dirname, __filename) {
        var MSS, h, i;
        MSS = require('libs/MSS.ls', module);
        h = require('libs/helper.coffee', module);
        window.MSS = MSS;
        i = {};
        i.controller = function () {
        };
        i.docHTML = '<h1>Loading...</h1>';
        i.parseHint = 'Please type your mss ^^^';
        i.mssInput = '';
        i.mssOutput = '';
        marked.setOptions({
            highlight: function (code) {
                return hljs.highlightAuto(code).value;
            }
        });
        m.request({
            url: 'MSS.md',
            method: 'GET',
            deserialize: function (data) {
                return marked(data);
            }
        }).then(function (html) {
            return i.docHTML = html;
        });
        i.view = function () {
            return m('#i', m('.doc', m.trust(i.docHTML)), m('.liveParser', m('textarea.mssInput', {
                value: i.mssInput,
                onkeydown: function (e) {
                    switch (false) {
                    case e.keyCode !== 9:
                        e.preventDefault();
                        h.eElem(e).value += '    ';
                        return m.redraw.strategy('none');
                    }
                },
                onkeyup: function (e) {
                    var srcLs;
                    i.mssInput = h.eElem(e).value;
                    srcLs = 'window.mssInputObj = \n' + i.mssInput.split('\n').map(function (line) {
                        return '    ' + line;
                    }).join('\n');
                    LiveScript.stab(srcLs, function (err) {
                        var lineNumberRegex, errMsg;
                        if (err) {
                            lineNumberRegex = /line (\d+)\:/;
                            errMsg = err.toString();
                            errMsg = errMsg.replace(lineNumberRegex, function (matched, digits) {
                                return 'line ' + (parseInt(digits) - 1) + ':';
                            });
                            return i.parseHint = errMsg;
                        } else {
                            return i.parseHint = 'Look NICE!';
                        }
                    });
                    console.log(window.mssInputObj);
                    if (typeof window.mssInputObj === 'object') {
                        return i.mssOutput = MSS.parse(window.mssInputObj, true);
                    }
                }
            }), m('.parseHint', i.parseHint), m('textarea.mssOutput', {
                disabled: true,
                value: i.mssOutput
            })));
        };
        m.module(document.body, i);
        i.mss = function () {
            var FullSize$, HalfWrapper$;
            FullSize$ = this.SizePc(100, 100);
            HalfWrapper$ = compose$(this.Mixin({ padding: this.pc(2, 2) }), this.SizePc(46, 96));
            return {
                Html_Body: FullSize$({ overflow: 'hidden' }),
                $I: this.RelPos()(FullSize$({
                    background: '#eee',
                    doc: this.AbsPos('TL', 0, 0)(HalfWrapper$({ overflow: 'scroll' })),
                    liveParser: this.AbsPosPc('TL', 0, 50)(HalfWrapper$({
                        mssInput: this.Border(1, '#ddd')(this.SizePc(100, 45)({ background: '#F5F2F0' })),
                        parseHint: this.CenterT$(this.SizePc(100, 2)({ padding: this.pc(2) })),
                        mssOutput: this.Border(1, '#ddd')(this.SizePc(100, 45)({ background: '#F5F2F0' }))
                    }))
                }))
            };
        }.call(MSS);
        MSS.tag('i', MSS.parse(i.mss));
        module['export'] = i;
        function compose$() {
            var functions = arguments;
            return function () {
                var i, result;
                result = functions[0].apply(this, arguments);
                for (i = 1; i < functions.length; ++i) {
                    result = functions[i](result);
                }
                return result;
            };
        }
    });
    require.define('libs/helper.coffee', function (module, exports, __dirname, __filename) {
        var camelCss, expandStyle, helper, styleEl, styleSheet, styleSheet;
        helper = {};
        helper.eElem = function (e) {
            return e.target || e.srcElement;
        };
        helper.easeInOutQuad = function (t, b, c, d) {
            t /= d / 2;
            if (t < 1)
                return c / 2 * t * t + b;
            t--;
            return -c / 2 * (t * (t - 2) - 1) + b;
        };
        helper.scrollToEase = function (to, duration, cb) {
            var animateScroll, change, currentTime, increment, self, start;
            self = this;
            start = document.documentElement.scrollTop || document.body.scrollTop;
            change = to - start;
            currentTime = 0;
            increment = 33;
            animateScroll = function () {
                var val;
                currentTime += increment;
                val = self.easeInOutQuad(currentTime, start, change, duration);
                window.scrollTo(0, val);
                if (currentTime < duration)
                    return setTimeout(animateScroll, increment);
            };
            return animateScroll();
        };
        styleEl = document.createElement('style');
        if (!window.ltIE9)
            styleEl.appendChild(document.createTextNode(''));
        document.head = document.head || document.getElementsByTagName('head')[0];
        document.head.appendChild(styleEl);
        styleSheet = styleEl.sheet;
        if (window.ltIE9)
            styleSheet = document.styleSheets[document.styleSheets.length - 1];
        expandStyle = function (selector, style) {
            var cssRule, key;
            cssRule = '';
            for (key in style) {
                if (key[0] === '&') {
                    expandStyle(selector + key.slice(1), style[key]);
                } else if (typeof style[key] === 'object') {
                    expandStyle(selector + ' ' + key, style[key]);
                } else {
                    cssRule = cssRule + key + ':' + style[key] + ';';
                }
            }
            if (cssRule)
                if (styleSheet.addRule) {
                    return styleSheet.addRule(selector, cssRule);
                } else {
                    return styleSheet.insertRule(selector + '{' + cssRule + '}', styleSheet.cssRules.length);
                }
        };
        helper.css = function (styles) {
            var key;
            return function (accum$) {
                for (key in styles) {
                    accum$.push(expandStyle(key, styles[key]));
                }
                return accum$;
            }.call(this, []);
        };
        camelCss = function (selector, style) {
            var cssRule, key;
            cssRule = '';
            for (key in style) {
                if (key[0] === '$') {
                    camelCss(selector + key.slice(1), style[key]);
                } else if (typeof style[key] === 'object') {
                    camelCss(selector + ' ' + key, style[key]);
                } else {
                    cssRule = cssRule + key + ':' + style[key] + ';';
                }
            }
            if (cssRule)
                if (styleSheet.addRule) {
                    return styleSheet.addRule(selector, cssRule);
                } else {
                    return styleSheet.insertRule(selector + '{' + cssRule + '}', styleSheet.cssRules.length);
                }
        };
        helper.CSS = function (style) {
            return camelCss('', style);
        };
        module.exports = helper;
    });
    require.define('libs/MSS.ls', function (module, exports, __dirname, __filename) {
        var MSS, slice$ = [].slice;
        MSS = {};
        MSS.tag = function (id, cssText) {
            var styleEl;
            styleEl = document.createElement('style');
            styleEl.id = id;
            if (!window.ltIE9) {
                styleEl.appendChild(document.createTextNode(cssText));
            }
            document.head = document.head || document.getElementsByTagName('head')[0];
            return document.head.appendChild(styleEl);
        };
        MSS.parse = function (mss, pretty, compiledStylePrefix) {
            var compiledStyle, lineEnd, indentSpace, parseR;
            pretty == null && (pretty = false);
            compiledStylePrefix == null && (compiledStylePrefix = '');
            compiledStyle = compiledStylePrefix;
            lineEnd = pretty ? '\n' : '';
            indentSpace = pretty ? '  ' : '';
            parseR = function (selectors, mss) {
                var cssRule, key, subSelectors, newSelectors, res$, i$, len$, sel, j$, len1$, subSel;
                cssRule = '';
                for (key in mss) {
                    if (typeof mss[key] === 'object') {
                        subSelectors = key.split('_');
                        subSelectors = MSS.parseSelectors(subSelectors);
                        res$ = [];
                        for (i$ = 0, len$ = selectors.length; i$ < len$; ++i$) {
                            sel = selectors[i$];
                            for (j$ = 0, len1$ = subSelectors.length; j$ < len1$; ++j$) {
                                subSel = subSelectors[j$];
                                res$.push(sel + '' + subSel);
                            }
                        }
                        newSelectors = res$;
                        parseR(newSelectors, mss[key]);
                    } else {
                        cssRule += indentSpace + MSS.parsePropName(key) + (':' + mss[key] + ';') + lineEnd;
                    }
                }
                if (cssRule.length) {
                    return compiledStyle = compiledStyle + selectors.join(',' + lineEnd) + '{' + lineEnd + (cssRule + '') + '}' + lineEnd;
                }
            };
            parseR([''], mss);
            return compiledStyle;
        };
        MSS.parseSelectors = function (selectors) {
            return selectors.map(function (sel) {
                var nest, ref$;
                nest = ' ';
                if (sel[0] === '&') {
                    sel = sel.slice(1);
                    nest = '';
                }
                switch (false) {
                case !(sel[0] === '$' && ('a' <= (ref$ = sel[1]) && ref$ <= 'z')):
                    return ':' + sel.slice(1);
                case !(sel[0] === '$' && ('A' <= (ref$ = sel[1]) && ref$ <= 'Z')):
                    return nest + '#' + sel[1].toLowerCase() + sel.slice(2);
                case !('a' <= (ref$ = sel[0]) && ref$ <= 'z'):
                    return nest + '.' + sel;
                default:
                    return nest + sel[0].toLowerCase() + sel.slice(1);
                }
            });
        };
        MSS.parsePropName = function (prop) {
            var transformed, i, c;
            transformed = '';
            i = 0;
            while ((c = prop[i]) != null) {
                if ('A' <= c && c <= 'Z') {
                    transformed += '-' + c.toLowerCase();
                } else {
                    transformed += c;
                }
                i++;
            }
            return transformed;
        };
        MSS.px = function () {
            var vArr;
            vArr = slice$.call(arguments);
            return vArr.join('px ') + 'px';
        };
        MSS.pc = function () {
            var vArr;
            vArr = slice$.call(arguments);
            return vArr.join('% ') + '%';
        };
        MSS.gold = function (v) {
            return Math.round(v * 0.618);
        };
        MSS.goldR = function (v) {
            return Math.round(v / 0.618);
        };
        MSS.rgb = function (r, g, b) {
            return 'rgba(' + r + ',' + g + ',' + b + ')';
        };
        MSS.rgba = function (r, g, b, a) {
            return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
        };
        MSS.hsl = function (h, s, l) {
            return 'hsl(' + h + ',' + s + '%,' + l + '%)';
        };
        MSS.hsla = function (r, g, b, a) {
            return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';
        };
        MSS.arrValU = function (vArr, i, unit) {
            var v;
            if (v = vArr[i]) {
                return v + unit;
            } else {
                return 0;
            }
        };
        MSS.Mixin = function (mssMix) {
            return function (mss) {
                return importAll$(mss, mssMix);
            };
        };
        MSS.Size = function (width, height) {
            return function (mss) {
                var x$;
                x$ = mss;
                if (width) {
                    x$.width = width + 'px';
                }
                if (height) {
                    x$.height = height + 'px';
                }
                return x$;
            };
        };
        MSS.SizePc = function (width, height) {
            return function (mss) {
                var x$;
                x$ = mss;
                if (width) {
                    x$.width = width + '%';
                }
                if (height) {
                    x$.height = height + '%';
                }
                return x$;
            };
        };
        MSS.Border = function (width, color, directions, borderStyle) {
            width == null && (width = 0);
            color == null && (color = '#eee');
            directions == null && (directions = 'A');
            borderStyle == null && (borderStyle = 'solid');
            return function (mss) {
                var style, x$;
                style = width + 'px ' + borderStyle + ' ' + color;
                x$ = mss;
                if (directions.indexOf('A') !== -1) {
                    x$.border = style;
                } else {
                    if (directions.indexOf('T') !== -1) {
                        x$.borderTop = style;
                    }
                    if (directions.indexOf('R') !== -1) {
                        x$.borderRight = style;
                    }
                    if (directions.indexOf('B') !== -1) {
                        x$.borderBottom = style;
                    }
                    if (directions.indexOf('L') !== -1) {
                        x$.borderLeft = style;
                    }
                }
                return x$;
            };
        };
        MSS.Tran = function (prop, time, type, delay) {
            prop == null && (prop = 'width');
            time == null && (time = 0.2);
            type == null && (type = 'ease');
            delay == null && (delay = 0);
            return function (mss) {
                var x$;
                x$ = mss;
                x$.transition = prop + ' ' + time + 's ' + type + ' ' + delay + 's';
                return x$;
            };
        };
        MSS.TranMs = function (prop, time, type, delay) {
            prop == null && (prop = 'width');
            time == null && (time = 0.2);
            type == null && (type = 'ease');
            delay == null && (delay = 0);
            return function (mss) {
                var x$;
                x$ = mss;
                x$.transition = prop + ' ' + time + 'ms ' + type + ' ' + delay + 'ms';
                return x$;
            };
        };
        MSS.InlineB = function (directions) {
            directions == null && (directions = void 8);
            return function (mss) {
                var x$;
                x$ = mss;
                x$.display = 'inline-block';
                switch (false) {
                case directions !== 'L':
                    x$.float = 'left';
                    break;
                case directions !== 'R':
                    x$.float = 'right';
                }
                if (directions) {
                    x$['*zoom'] = 1;
                    x$['*display'] = 'inline';
                }
                return x$;
            };
        };
        MSS.Pos = function (directions, vArr, unit) {
            directions == null && (directions = '');
            vArr == null && (vArr = []);
            unit == null && (unit = 'px');
            return function (mss) {
                var x$, i;
                x$ = mss;
                if ((i = directions.indexOf('T')) !== -1) {
                    x$.top = MSS.arrValU(vArr, i, unit);
                }
                if ((i = directions.indexOf('R')) !== -1) {
                    x$.right = MSS.arrValU(vArr, i, unit);
                }
                if ((i = directions.indexOf('B')) !== -1) {
                    x$.bottom = MSS.arrValU(vArr, i, unit);
                }
                if ((i = directions.indexOf('L')) !== -1) {
                    x$.left = MSS.arrValU(vArr, i, unit);
                }
                return x$;
            };
        };
        MSS.AbsPos = function (directions) {
            var v;
            directions == null && (directions = 'TL');
            v = slice$.call(arguments, 1);
            return function (mss) {
                var x$;
                x$ = mss;
                x$.position = 'absolute';
                MSS.Pos(directions, v)(mss);
                return x$;
            };
        };
        MSS.AbsPosPc = function (directions) {
            var v;
            directions == null && (directions = 'TL');
            v = slice$.call(arguments, 1);
            return function (mss) {
                var x$;
                x$ = mss;
                x$.position = 'absolute';
                MSS.Pos(directions, v, '%')(mss);
                return x$;
            };
        };
        MSS.RelPos = function (directions) {
            var v;
            directions == null && (directions = 'TL');
            v = slice$.call(arguments, 1);
            return function (mss) {
                var x$;
                x$ = mss;
                x$.position = 'relative';
                MSS.Pos(directions, v)(mss);
                return x$;
            };
        };
        MSS.RelPosPc = function (directions) {
            var v;
            directions == null && (directions = 'TL');
            v = slice$.call(arguments, 1);
            return function (mss) {
                var x$;
                x$ = mss;
                x$.position = 'relative';
                MSS.Pos(directions, v, '%')(mss);
                return x$;
            };
        };
        MSS.LineH = function (h, fontS) {
            return function (mss) {
                var x$;
                x$ = mss;
                if (h) {
                    x$.height = h + 'px';
                    x$.lineHeight = h + 'px';
                }
                if (fontS) {
                    x$.fontSize = fontS + 'px';
                }
                x$.verticalAlign = 'middle';
                return x$;
            };
        };
        MSS.LineHPc = function (h, fontS) {
            return function (mss) {
                var x$;
                x$ = mss;
                if (h) {
                    x$.height = h + '%';
                    x$.lineHeight = h + '%';
                }
                if (fontS) {
                    x$.fontSize = fontS + '%';
                }
                x$.verticalAlign = 'middle';
                return x$;
            };
        };
        MSS.Hover = function (color, cur) {
            cur == null && (cur = 'pointer');
            return function (mss) {
                var x$;
                x$ = mss;
                (x$.$hover || (x$.$hover = {})).cursor = cur;
                if (color) {
                    x$.$hover.color = color;
                }
                return x$;
            };
        };
        MSS.Vendor = function (propName) {
            return function (mss) {
                var x$, v, PropBase;
                x$ = mss;
                if ((v = x$[propName]) != null) {
                    PropBase = propName[0].toUpperCase() + propName.slice(1);
                    x$['Moz' + PropBase] = v;
                    x$['Webkit' + PropBase] = v;
                    x$['Ms' + PropBase] = v;
                }
                return x$;
            };
        };
        MSS.Arrow = function (directions, width, color) {
            return function (mss) {
                if (directions.indexOf('T') !== -1) {
                    MSS.Border(width, color, 'B')(MSS.Border(width, 'transparent', 'TLR')(mss));
                }
                if (directions.indexOf('R') !== -1) {
                    MSS.Border(width, color, 'L')(MSS.Border(width, 'transparent', 'TRB')(mss));
                }
                if (directions.indexOf('B') !== -1) {
                    MSS.Border(width, color, 'T')(MSS.Border(width, 'transparent', 'LRB')(mss));
                }
                if (directions.indexOf('L') !== -1) {
                    return MSS.Border(width, color, 'R')(MSS.Border(width, 'transparent', 'TLB')(mss));
                }
            };
        };
        MSS.CenterB$ = function (mss) {
            var x$;
            x$ = mss;
            x$.margin = '0 auto';
            return x$;
        };
        MSS.CenterT$ = function (mss) {
            var x$;
            x$ = mss;
            x$.textAlign = 'center';
            return x$;
        };
        MSS.CenterWrap$ = function (mss) {
            var x$;
            x$ = mss;
            x$.position = 'relative';
            x$.top = '50%';
            x$.margin = '0 auto';
            x$.height = 0;
            return x$;
        };
        MSS.EllipT$ = function (mss) {
            var x$;
            x$ = mss;
            x$.whiteSpace = 'nowrap';
            x$.overflow = 'hidden';
            x$.textOverflow = 'ellipsis';
            return x$;
        };
        MSS.MAP = function (Mixin) {
            return function (mss) {
                var newMss, key;
                newMss = {};
                for (key in mss) {
                    if (typeof mss[key] === 'object') {
                        newMss[key] = importAll$({}, Mixin(mss[key]));
                    } else {
                        newMss[key] = mss[key];
                    }
                }
                return newMss;
            };
        };
        MSS.PREFIX_MAP = function (prefixs_, indexMixin) {
            return function (mss) {
                var newMss, prefixs, key;
                newMss = {};
                prefixs = prefixs_.split('_');
                for (key in mss) {
                    if (typeof mss[key] === 'object') {
                        prefixs.map(fn$);
                    } else {
                        newMss[key] = mss[key];
                    }
                }
                return newMss;
                function fn$(prefix, index) {
                    newMss[prefix + key] = {};
                    return importAll$(newMss[prefix + key], indexMixin(prefix, index)(mss[key]));
                }
            };
        };
        MSS.MAP_SUFFIX = function (_suffix, indexMixin) {
            return function (mss) {
                var newMss, suffixs, key;
                newMss = {};
                suffixs = _suffix.split('_');
                for (key in mss) {
                    if (typeof mss[key] === 'object') {
                        suffixs.map(fn$);
                    } else {
                        newMss[key] = mss[key];
                    }
                }
                return newMss;
                function fn$(suffix, index) {
                    newMss[key + suffix] = {};
                    return importAll$(newMss[key + suffix], indexMixin(suffix, index)(mss[key]));
                }
            };
        };
        module.exports = MSS;
        function importAll$(obj, src) {
            for (var key in src)
                obj[key] = src[key];
            return obj;
        }
    });
    require('docMSS/index.ls');
}.call(this, this));
//# sourceMappingURL=data:application/json;base64,