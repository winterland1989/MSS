// Generated by CoffeeScript 1.9.3
(function() {
  var docHTML, evalMss, mssInput, mssLiveDoc, mssOutput, onInputInput, onInputKeyDown, parseHint, s;

  s = window.mss;

  docHTML = '<h1>Loading...</h1>';

  parseHint = 'Please type your mss ^^^';

  mssInput = "Foo:\n    margin: '2px'\n    $hover:\n        color: '#fff'\n\nMixinTest: mss.Size('100%', '100%') mss.TextEllip$\n    otherProp: '...'\n";

  parseHint = '';

  mssOutput = '';

  marked.setOptions({
    highlight: function(code) {
      return hljs.highlightAuto(code).value;
    }
  });

  m.request({
    url: 'README.md.html',
    method: 'GET',
    deserialize: function(data) {
      return marked(data);
    }
  }).then(function(html) {
    return docHTML = html;
  });

  onInputKeyDown = function(e) {
    var selStart, self;
    if (e.keyCode === 9) {
      e.preventDefault();
      self = e.target;
      selStart = self.selectionStart;
      self.value = self.value.substring(0, selStart) + '    ' + self.value.substring(selStart);
      self.selectionStart = self.selectionEnd = selStart + 4;
      return m.redraw.strategy('none');
    }
  };

  onInputInput = function(e) {
    mssInput = e.target.value;
    return evalMss(e.target.value);
  };

  evalMss = function(src) {
    var err, errMsg, lineNumberRegex;
    try {
      CoffeeScript["eval"]('window.mssInputObj = \n' + src);
      parseHint = 'Look NICE!';
      return mssOutput = s.parse(window.mssInputObj, true);
    } catch (_error) {
      err = _error;
      lineNumberRegex = /line (\d+)\:/;
      errMsg = err.toString();
      errMsg = errMsg.replace(lineNumberRegex, function(matched, digits) {
        return 'line ' + parseInt(digits) - 1 + ':';
      });
      return parseHint = errMsg;
    }
  };

  evalMss(mssInput);

  mssLiveDoc = {
    view: function() {
      return m('#i', [
        m('.Doc', m.trust(docHTML)), m('.LiveParser', [
          m('textarea.MssInput', {
            value: mssInput,
            onkeydown: onInputKeyDown,
            oninput: onInputInput
          }), m('.ParseHint', parseHint), m('textarea.MssOutput', {
            disabled: true,
            value: mssOutput
          })
        ])
      ]);
    }
  };

  s.tag({
    html_body: s.Size('100%', '100%')({
      overflow: 'hidden',
      fontSize: '14px'
    }),
    $I: s.PosRel(0, 0)(s.Size('100%', '100%')({
      background: '#eee',
      Doc: s.PosAbs(0, '50%', 0, 0)(s.Size('46%', '100%')({
        padding: '2%',
        overflow: 'scroll'
      })),
      LiveParser: s.PosAbs(0, 0, 0, '50%')(s.Size('46%', '96%')({
        padding: '2%',
        MssInput_MssOutput: {
          border: '1px solid #ccc',
          background: '#fff',
          fontSize: '1em'
        },
        MssInput: s.Size('100%', '44%')({
          background: '#F5F2F0'
        }),
        ParseHint: s.Size('100%', '2%')({
          padding: '2%'
        }),
        MssOutput: s.Size('100%', '44%')({
          background: '#F5F2F0'
        })
      }))
    }))
  });

  m.mount(document.body, mssLiveDoc);

}).call(this);
