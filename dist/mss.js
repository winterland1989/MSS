// Generated by CoffeeScript 1.9.3
(function() {
  var Animate, ClearFix$, KeyFrames, LineSize, MediaQuery, Mixin, PosAbs, PosRel, Size, TRAVERSE, TextEllip$, TouchScroll, Vendor, bw, gold, goldR, hsl, hsla, isIeLessThan9, linearGrad, mss, num, parse, parsePropName, parseR, parseSelectors, pc, px, radialGrad, reTag, repeatGrad, rgb, rgba, tag, unTag, unit;

  tag = function(mss, id) {
    var cssText, styleEl;
    cssText = parse(mss);
    styleEl = document.createElement('style');
    if (id) {
      styleEl.id = id;
    }
    styleEl.type = 'text/css';
    if (isIeLessThan9) {
      styleEl.appendChild(document.createTextNode(cssText));
    } else {
      styleEl.styleSheet.cssText = cssText;
    }
    document.head = document.head || document.getElementsByTagName('head')[0];
    document.head.appendChild(styleEl);
    return styleEl;
  };

  reTag = function(mss, styleEl) {
    var cssText;
    cssText = parse(mss);
    if (isIeLessThan9) {
      styleEl.childNodes[0].textContent = cssText;
    } else {
      styleEl.styleSheet.cssText = cssText;
    }
    return styleEl;
  };

  unTag = function(styleEl) {
    if (styleEl) {
      return document.head.removeChild(styleEl);
    }
  };

  isIeLessThan9 = function() {
    var div;
    div = document.createElement('div');
    div.innerHTML = "<!--[if lt IE 9]><i></i><![endif]-->";
    return div.getElementsByTagName("i").length === 1;
  };

  parseR = function(selectors, mss, indent, lineEnd) {
    var cssRule, j, k, key, len, mergedMss, mssObj, newSelectors, subCssRule, subSelectors, v, val;
    if (mss instanceof Array) {
      mergedMss = {};
      for (j = 0, len = mss.length; j < len; j++) {
        mssObj = mss[j];
        for (k in mssObj) {
          v = mssObj[k];
          mergedMss[k] = v;
        }
      }
      mss = mergedMss;
    }
    cssRule = '';
    subCssRule = '';
    newSelectors = void 0;
    for (key in mss) {
      val = mss[key];
      if (key[0] === '@') {
        if (typeof val === "object") {
          subCssRule += key + "{" + lineEnd + (parseR([''], val, indent, lineEnd)) + "}" + lineEnd;
        } else {
          subCssRule += key + " " + val + ";" + lineEnd;
        }
      } else {
        if (typeof val === "object") {
          subSelectors = parseSelectors(key);
          newSelectors = (function() {
            var len1, len2, m, n, res, sel, subSel;
            res = [];
            for (m = 0, len1 = subSelectors.length; m < len1; m++) {
              subSel = subSelectors[m];
              for (n = 0, len2 = selectors.length; n < len2; n++) {
                sel = selectors[n];
                res.push("" + sel + subSel);
              }
            }
            return res;
          })();
          subCssRule += parseR(newSelectors, val, indent, lineEnd);
        } else if (val != null) {
          cssRule += "" + indent + (parsePropName(key)) + ":" + val + ";" + lineEnd;
        }
      }
    }
    return (cssRule !== '' ? (selectors.join(',' + lineEnd)) + "{" + lineEnd + cssRule + "}" + lineEnd : '') + subCssRule;
  };

  parse = function(mss, pretty) {
    var indent;
    if (pretty == null) {
      pretty = false;
    }
    return indent = parseR([''], mss, (pretty ? '  ' : ''), (pretty ? '\n' : ''));
  };

  parseSelectors = function(selectorString) {
    var j, len, ref, ref1, results, sel, selectors;
    selectors = selectorString.split('_');
    results = [];
    for (j = 0, len = selectors.length; j < len; j++) {
      sel = selectors[j];
      if (('A' <= (ref = sel[0]) && ref <= 'Z')) {
        results.push(' .' + sel);
      } else if (sel[0] === '$') {
        if (('A' <= (ref1 = sel[1]) && ref1 <= 'Z')) {
          results.push(' #' + sel[1].toLowerCase() + sel.slice(2));
        } else {
          results.push(':' + sel.slice(1));
        }
      } else {
        results.push(' ' + sel);
      }
    }
    return results;
  };

  parsePropName = function(prop) {
    var c, j, len, transformed;
    transformed = '';
    for (j = 0, len = prop.length; j < len; j++) {
      c = prop[j];
      if (('A' <= c && c <= 'Z')) {
        transformed += "-" + c.toLowerCase();
      } else {
        transformed += c;
      }
    }
    return transformed;
  };

  num = parseInt;

  unit = function(str) {
    switch (str.slice(-1)) {
      case '%':
        return '%';
      default:
        return str.slice(-2);
    }
  };

  px = function() {
    var argsN, i, s;
    s = '';
    i = 0;
    argsN = arguments.length - 1;
    while (i < argsN) {
      s += arguments[i++] + 'px ';
    }
    s += arguments[i] + 'px';
    return s;
  };

  pc = function() {
    var argsN, i, s;
    s = '';
    i = 0;
    argsN = arguments.length - 1;
    while (i < argsN) {
      s += arguments[i++] + '% ';
    }
    s += arguments[i] + '%';
    return s;
  };

  gold = function(v) {
    return Math.round(v * 0.618);
  };

  goldR = function(v) {
    return Math.round(v / 0.618);
  };

  rgb = function(r, g, b) {
    return "rgb(" + r + "," + g + "," + b + ")";
  };

  bw = function(bw) {
    return "rgb(" + bw + "," + bw + "," + bw + ")";
  };

  rgba = function(r, g, b, a) {
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  };

  hsl = function(h, s, l) {
    return "hsl(" + h + "," + s + "%," + l + "%)";
  };

  hsla = function(r, g, b, a) {
    return "hsla(" + h + "," + s + "%," + l + "%," + a + ")";
  };

  linearGrad = function(sideOrAngle, stops) {
    return "linear-gradient(#sideOrAngle," + (stops.join(',')) + ")";
  };

  radialGrad = function(stops) {
    return "radial-gradient(" + (stops.join(',')) + ")";
  };

  repeatGrad = function(sideOrAngle, stops) {
    return "repeat-gradient(#sideOrAngle," + (stops.join(',')) + ")";
  };

  Vendor = function(prop) {
    return function(mss) {
      var PropBase, v;
      if ((v = mss[prop]) != null) {
        PropBase = prop[0].toUpperCase() + prop.slice(1);
        mss['Moz' + PropBase] = v;
        mss['Webkit' + PropBase] = v;
        mss['Ms' + PropBase] = v;
      }
      return mss;
    };
  };

  Mixin = function(mssMix) {
    return function(mss) {
      var k, v;
      for (k in mssMix) {
        v = mssMix[k];
        mss[k] = v;
      }
      return mss;
    };
  };

  Size = function(width, height) {
    return function(mss) {
      if (width != null) {
        mss.width = width;
      }
      if (height != null) {
        mss.height = height;
      }
      return mss;
    };
  };

  PosAbs = function(top, right, bottom, left) {
    return function(mss) {
      mss.position = 'absolute';
      if (top != null) {
        mss.top = top;
      }
      if (right != null) {
        mss.right = right;
      }
      if (bottom != null) {
        mss.bottom = bottom;
      }
      if (left != null) {
        mss.left = left;
      }
      return mss;
    };
  };

  PosRel = function(top, right, bottom, left) {
    return function(mss) {
      mss.position = 'relative';
      if (top != null) {
        mss.top = top;
      }
      if (right != null) {
        mss.right = right;
      }
      if (bottom != null) {
        mss.bottom = bottom;
      }
      if (left != null) {
        mss.left = left;
      }
      return mss;
    };
  };

  LineSize = function(lineHeight, fontS) {
    return function(mss) {
      if (lineHeight != null) {
        mss.height = mss.lineHeight = lineHeight;
      }
      if (fontS != null) {
        mss.fontSize = fontS;
      }
      return mss;
    };
  };

  TouchScroll = function(x) {
    return function(mss) {
      if (x) {
        mss.overflowX = 'scroll';
      } else {
        mss.overflowY = 'scroll';
      }
      mss.overflowScrolling = 'touch';
      mss.WebkitOverflowScrolling = 'touch';
      mss.MozOverflowScrolling = 'touch';
      return mss;
    };
  };

  Animate = function(name, time, type, delay, iter, direction, fill, state) {
    if (type == null) {
      type = 'linear';
    }
    if (delay == null) {
      delay = '0s';
    }
    if (iter == null) {
      iter = 1;
    }
    return function(mss) {
      mss.animate = (name + " " + time + " " + type + " " + delay + " " + iter) + (direction != null ? direction : '') + (fill != null ? fill : '') + (state != null ? state : '');
      return mss;
    };
  };

  MediaQuery = function(queryObj) {
    return function(mss) {
      var k, mediaType, obj, queryRules, queryStrArr, v;
      queryStrArr = (function() {
        var results;
        results = [];
        for (mediaType in queryObj) {
          queryRules = queryObj[mediaType];
          if (mediaType[0] === '_') {
            mediaType = 'not ' + mediaType.slice(1);
          }
          if (mediaType[0] === '$') {
            mediaType = 'only ' + mediaType.slice(1);
          }
          if (queryRules) {
            results.push(mediaType + ' and ' + ((function() {
              var results1;
              results1 = [];
              for (k in queryRules) {
                v = queryRules[k];
                results1.push('(' + (parsePropName(k)) + (v ? ':' + v : '') + ')');
              }
              return results1;
            })()).join(' and '));
          } else {
            results.push(mediaType);
          }
        }
        return results;
      })();
      return (
        obj = {},
        obj["@media " + (queryStrArr.join(','))] = mss,
        obj
      );
    };
  };

  KeyFrames = function(name) {
    return function(mss) {
      var k, keyFramesObj, max, obj, v;
      keyFramesObj = {};
      max = 0;
      for (k in mss) {
        max = Math.max(max, Number.parseFloat(k));
      }
      for (k in mss) {
        v = mss[k];
        keyFramesObj[(Number.parseFloat(k)) * 100 / max + '%'] = v;
      }
      return (
        obj = {},
        obj["@keyframes " + name] = keyFramesObj,
        obj
      );
    };
  };

  TextEllip$ = function(mss) {
    mss.whiteSpace = 'nowrap';
    mss.overflow = 'hidden';
    mss.textOverflow = 'ellipsis';
    return mss;
  };

  ClearFix$ = function(mss) {
    mss['*zoom'] = 1;
    mss.$before_$after = {
      content: "''",
      display: 'table'
    };
    mss.$after = {
      clear: 'both'
    };
    return mss;
  };

  TRAVERSE = function(mss, fn) {
    var k, newMss, results, v;
    newMss = {};
    results = [];
    for (k in mss) {
      v = mss[k];
      results.push(newMss[k] = typeof v === 'object' ? TRAVERSE(v, fn) : fn(k, v));
    }
    return results;
  };

  mss = {
    tag: tag,
    reTag: reTag,
    unTag: unTag,
    parse: parse,
    parseSelectors: parseSelectors,
    parsePropName: parsePropName,
    num: num,
    unit: unit,
    px: px,
    pc: pc,
    gold: gold,
    goldR: goldR,
    rgb: rgb,
    bw: bw,
    rgba: rgba,
    hsla: hsla,
    linearGrad: linearGrad,
    radialGrad: radialGrad,
    repeatGrad: repeatGrad,
    Vendor: Vendor,
    Mixin: Mixin,
    Size: Size,
    PosAbs: PosAbs,
    PosRel: PosRel,
    LineSize: LineSize,
    TouchScroll: TouchScroll,
    Animate: Animate,
    MediaQuery: MediaQuery,
    KeyFrames: KeyFrames,
    TextEllip$: TextEllip$,
    ClearFix$: ClearFix$
  };

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = mss;
  } else if (typeof define === "function" && define.amd) {
    define(function() {
      return mss;
    });
  } else if (typeof window !== "undefined" && window !== null) {
    window.mss = mss;
  }

}).call(this);
